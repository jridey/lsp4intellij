plugins {
    id "java"
    id "org.jetbrains.intellij" version "1.15.0"
    id "com.github.hierynomus.license" version "0.16.1"
    id "com.github.gradle-git-version-calculator" version "1.1.0"
    id 'net.researchgate.release' version '3.0.2'
//    id "com.github.spotbugs" version "3.0.0"
//    id "org.sonarqube" version "2.8"
//    id 'signing'
}

repositories {
    mavenCentral()
}

group = "org.wso2.lsp4intellij"
version = gitVersionCalculator.calculateVersion("v")

intellij {
    version = '2022.2.5'
    type = 'IU'
    updateSinceUntilBuild = false
}

dependencies {
    implementation group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: '0.21.0'
    implementation group: 'com.vladsch.flexmark', name: 'flexmark', version: '0.64.8'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.9.0'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

sourceCompatibility = 11
targetCompatibility = 11

license {
    header = project.file("resources/license/HEADER.txt")
    ext["year"] = Calendar.getInstance().get(Calendar.YEAR)
    ext["author"] = "WSO2 Inc. (http://www.wso2.org)"
    strictCheck = true
    skipExistingHeaders = true
    mapping("java", "SLASHSTAR_STYLE")
    exclude("/**/*.png")
}

//spotbugsMain {
//    it.effort "max"
//    it.reportLevel "high"
//    it.reports {
//        xml.enabled false
//        html.enabled true
//    }
//    def excludeFile = file('spotbugs-exclude.xml')
//    if(excludeFile.exists()) {
//        it.excludeFilter = excludeFile
//    }
//    classpath += sourceSets."${(it.name - ~/^spotbugs/).uncapitalize()}".with { it.compileClasspath + project.configurations."${it.compileOnlyConfigurationName}" }
//}

//spotbugsTest {
//    it.enabled = false
//}

//check {
//    dependsOn(tasks.jacocoTestReport)
//}

//jacocoTestReport {
//    reports {
//        xml.enabled = true
//        xml.destination = new File("$buildDir/reports/jacoco/test/jacoco.xml")
//    }
//}

//sonarqube {
//    properties {
//        property("sonar.sourceEncoding", "UTF-8")
//        property("sonar.host.url", "https://sonarcloud.io")
//        property("sonar.organization", "ballerina-platform")
//        property("sonar.projectKey", "ballerina-platform_lsp4intellij")
//        property("sonar.projectName", "LSP4IntelliJ")
//        property("sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacoco.xml")
//    }
//}
